I"Dn<h4 id="组件的定义">组件的定义</h4>
<ul>
  <li>配置文件
    <ul>
      <li>要编写一个自定义组件，首先需要在<code class="language-plaintext highlighter-rouge"> json </code>文件中进行自定义组件声明（将 <code class="language-plaintext highlighter-rouge">component</code> 字段设为<code class="language-plaintext highlighter-rouge"> true</code> ）。</li>
      <li>使用用已注册的自定义组件前，首先要在页面的<code class="language-plaintext highlighter-rouge"> json </code>文件中进行引用声明。此时需要提供每个自定义组件的<code class="language-plaintext highlighter-rouge">标签名</code>和对应的自定义组件<code class="language-plaintext highlighter-rouge">文件路径</code>（标签名称只能是小写字母、中划线和下划线的组合，组件根目录名不能以“wx-”为前缀）。</li>
    </ul>
  </li>
</ul>

<pre><code class="language-JSON">//自定义组件component.json
{
  "component": true
}

//引用自定义组件的页面 page.json
{
  "usingComponents": {
    "component-tag-name": "../component/component"
  }
}
</code></pre>

<ul>
  <li>wxml文件
在组件模板中可以提供一个 <slot> 节点，用于承载组件引用时提供的子节点。默认情况下，一个组件的wxml中只能有一个slot。需要使用多slot时，可以在组件js中声明启用`options: {multipleSlots: true  }`，以不同的 name 来区分。</slot></li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 这是自定义组件的内部WXML结构(component.wxml)--&gt;</span>
<span class="nt">&lt;view</span> <span class="na">class=</span><span class="s">'wapper'</span><span class="nt">&gt;</span>
  <span class="nt">&lt;text&gt;</span>this is component<span class="nt">&lt;/text&gt;</span>
  <span class="nt">&lt;slot</span> <span class="na">name=</span><span class="s">"slot1"</span><span class="nt">&gt;&lt;/slot&gt;</span>
  我在中间
  <span class="nt">&lt;slot</span> <span class="na">name=</span><span class="s">"slot2"</span><span class="nt">&gt;&lt;/slot&gt;</span>
<span class="nt">&lt;/view&gt;</span>

<span class="c">&lt;!-- 以下是对一个自定义组件的引用 (page.wxml)--&gt;</span>
<span class="nt">&lt;view&gt;</span>
  <span class="nt">&lt;text&gt;</span>This is Page<span class="nt">&lt;/text&gt;</span>
  <span class="nt">&lt;component-tag-name</span> <span class="na">inner-text=</span><span class="s">"Some text"</span> <span class="na">class=</span><span class="s">"page-component"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;view</span> <span class="na">slot=</span><span class="s">"slot1"</span> <span class="na">class=</span><span class="s">"slot"</span><span class="nt">&gt;</span>来自page页面，通过slot标签<span class="nt">&lt;/view&gt;</span>
    <span class="nt">&lt;view</span> <span class="na">slot=</span><span class="s">"slot2"</span><span class="nt">&gt;&lt;/view&gt;</span>
  <span class="nt">&lt;/component-tag-name&gt;</span>
<span class="nt">&lt;/view&gt;</span>
</code></pre></div></div>

<ul>
  <li>wxss文件</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span><span class="nt">component</span><span class="nc">.wxss</span>
<span class="nc">.wapper</span><span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span><span class="m">#ccc</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="nb">auto</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.slot</span><span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span><span class="no">red</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">//</span><span class="nt">page</span><span class="nc">.wxss</span>
<span class="nc">.page-component</span><span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span><span class="m">#fff</span><span class="p">;</span><span class="err">//有效，继承样式</span>
  <span class="nl">padding</span><span class="p">:</span><span class="m">10px</span><span class="p">;</span><span class="err">//无效</span>
<span class="p">}</span>
<span class="nc">.slot</span><span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span><span class="no">green</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>js文件</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//component.js</span>
<span class="nx">Component</span><span class="p">({</span>
  <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">multipleSlots</span><span class="p">:</span> <span class="kc">true</span> <span class="c1">// 在组件定义时的选项中启用多slot支持</span>
  <span class="p">},</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// 这里定义了innerText属性，属性值可以在组件使用时指定</span>
    <span class="na">innerText</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">default value</span><span class="dl">'</span><span class="p">,</span> <span class="c1">//不存在此属性时</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// 这里是一些组件内部数据</span>
    <span class="na">someData</span><span class="p">:</span> <span class="p">{}</span>
  <span class="p">},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// 这里是一个自定义方法</span>
    <span class="na">customMethod</span><span class="p">:</span> <span class="kd">function</span><span class="p">(){}</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/custom-component/component.html">Component构造器API</a>
<img src="http://upload-images.jianshu.io/upload_images/10171700-4e62c8bec1cdc76c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="组件的定义" />
通过上面的代码和显示结果可以看出：</p>
<ol>
  <li>slot样式受<code class="language-plaintext highlighter-rouge">page.wxss</code>里的<code class="language-plaintext highlighter-rouge">.slot</code>影响显示绿色，不受<code class="language-plaintext highlighter-rouge">component.wxss</code>的<code class="language-plaintext highlighter-rouge">.slot</code>影响显示红色。</li>
  <li>继承样式，如 font 、 color ，会从组件外继承到组件内。除继承样式外， app.wxss 中的样式、组件所在页面的的样式对自定义组件无效。例子中<code class="language-plaintext highlighter-rouge">.page-component</code>的<code class="language-plaintext highlighter-rouge">color:#fff</code>能生效，而<code class="language-plaintext highlighter-rouge">padding</code>则不生效。</li>
</ol>

<h4 id="page与component数据交互">Page与Component数据交互</h4>
<blockquote>
  <p>Tip：page代指引用组件页面，component代指自定义组件</p>
</blockquote>

<ul>
  <li>page &gt; component
    <ol>
      <li>page在引用组件时能通过<strong>属性值</strong>设置，component.js在<code class="language-plaintext highlighter-rouge">properties</code>获取。</li>
      <li>page在引用组件时通<strong>data-xxx</strong>设置，component.js在<code class="language-plaintext highlighter-rouge">this.dataset</code>获取。</li>
    </ol>
  </li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- page.wxml --&gt;</span>
<span class="nt">&lt;component-tag-name</span> <span class="na">fromPage=</span><span class="s">"来自Page"</span> <span class="na">data-other=</span><span class="s">"from dataset"</span><span class="nt">&gt;&lt;/component-tag-name&gt;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Component</span><span class="p">({</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">formPage</span><span class="p">:</span> <span class="nb">String</span>  <span class="c1">//简写</span>
    <span class="cm">/*
    myProperty: { // 属性名
      type: String, // 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）
      value: '', // 属性初始值（可选），如果未指定则会根据类型选择一个
      observer: function(newVal, oldVal){} // 属性被改变时执行的函数（可选），也可以写成在methods段中定义的方法名字符串, 如：'_propertyChange'
    }
    */</span>
  <span class="p">},</span>
  <span class="na">attached</span><span class="p">:</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">properties</span><span class="p">.</span><span class="nx">fromPage</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">fromPage</span><span class="p">);</span> <span class="c1">//用data也能访问properties</span>
    <span class="c1">//设置properties值用setData()</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span>
      <span class="na">fromPage</span><span class="p">:</span> <span class="dl">'</span><span class="s1">改变了</span><span class="dl">'</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">properties</span><span class="p">.</span><span class="nx">fromPage</span><span class="p">);</span>
    <span class="c1">//通过dataset获取data-other的值</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">other</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p>控制台打印如下</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>来自Page
来自Page
改变了
from dataset
</code></pre></div></div>

<ul>
  <li>component &gt; page
组件中的变量要传递到page页面可以通过事件触发<code class="language-plaintext highlighter-rouge">this.triggerEvent();</code>来实行</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- page.wxml --&gt;</span>
<span class="c">&lt;!-- 当自定义组件触发“myevent”事件时，调用“onMyEvent”方法 --&gt;</span>
<span class="nt">&lt;component-tag-name</span> <span class="na">bindmyevent=</span><span class="s">"onMyEvent"</span> <span class="nt">/&gt;</span>

<span class="c">&lt;!--component.wxml --&gt;</span>
<span class="c">&lt;!-- 在自定义组件中 --&gt;</span>
<span class="nt">&lt;button</span> <span class="na">bindtap=</span><span class="s">"onTap"</span><span class="nt">&gt;</span>点击这个按钮将触发“myevent”事件<span class="nt">&lt;/button&gt;</span>

</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//page.js</span>
<span class="nx">Page</span><span class="p">({</span>
  <span class="na">onMyEvent</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">msg</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="c1">//component.js</span>
<span class="nx">Component</span><span class="p">({</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">onTap</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">myEventDetail</span> <span class="o">=</span> <span class="p">{</span><span class="na">msg</span><span class="p">:</span><span class="dl">'</span><span class="s1">来自component的信息</span><span class="dl">'</span><span class="p">}</span> <span class="c1">// detail对象，提供给事件监听函数</span>
      <span class="kd">var</span> <span class="nx">myEventOption</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// 触发事件的选项</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">triggerEvent</span><span class="p">(</span><span class="dl">'</span><span class="s1">myevent</span><span class="dl">'</span><span class="p">,</span> <span class="nx">myEventDetail</span><span class="p">,</span> <span class="nx">myEventOption</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p>点击component组件，控制台输出入下</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>来自component的信息
</code></pre></div></div>

<h4 id="behaviors">behaviors</h4>
<p>behaviors 是用于组件间代码共享的特性。每个 behavior 可以包含一组属性、数据、生命周期函数和方法，组件引用它时，它的属性、数据和方法会被合并到组件中，生命周期函数也会在对应时机被调用。每个组件可以引用多个 behavior 。 behavior 也可以引用其他 behavior 。
<code class="language-plaintext highlighter-rouge">behavior</code> 需要使用 <code class="language-plaintext highlighter-rouge">Behavior()</code> 构造器定义。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// my-behavior.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Behavior</span><span class="p">({</span>
  <span class="na">behaviors</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">myBehaviorProperty</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">String</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">myBehaviorData</span><span class="p">:</span> <span class="p">{}</span>
  <span class="p">},</span>
  <span class="na">attached</span><span class="p">:</span> <span class="kd">function</span><span class="p">(){},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">myBehaviorMethod</span><span class="p">:</span> <span class="kd">function</span><span class="p">(){}</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p>组件引用时，在<code class="language-plaintext highlighter-rouge"> behaviors </code>定义段中将它们逐个列出即可。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// my-component.js</span>
<span class="kd">var</span> <span class="nx">myBehavior</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">my-behavior</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">Component</span><span class="p">({</span>
  <span class="na">behaviors</span><span class="p">:</span> <span class="p">[</span><span class="nx">myBehavior</span><span class="p">],</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">myProperty</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">String</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">myData</span><span class="p">:</span> <span class="p">{}</span>
  <span class="p">},</span>
  <span class="na">attached</span><span class="p">:</span> <span class="kd">function</span><span class="p">(){},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">myMethod</span><span class="p">:</span> <span class="kd">function</span><span class="p">(){}</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p>在上例中，<code class="language-plaintext highlighter-rouge">my-component</code>中最终包含<code class="language-plaintext highlighter-rouge">myBehaviorProperty</code>、<code class="language-plaintext highlighter-rouge">myProperty</code>两个属性，<code class="language-plaintext highlighter-rouge">myBehaviorData</code>、<code class="language-plaintext highlighter-rouge">myData</code>两个数据字段，和<code class="language-plaintext highlighter-rouge">myBehaviorMethod</code>、<code class="language-plaintext highlighter-rouge">myMethod</code>两个方法。当组件触发<code class="language-plaintext highlighter-rouge">attached</code>生命周期时，会依次触发<code class="language-plaintext highlighter-rouge">my-behavior</code>中的<code class="language-plaintext highlighter-rouge">attached</code>生命周期函数和<code class="language-plaintext highlighter-rouge">my-component</code>中的<code class="language-plaintext highlighter-rouge">attached</code>生命周期函数。</p>

<p>组件和它引用的 behavior 中可以包含<strong>同名的字段</strong>，对这些字段的处理方法如下：</p>
<ul>
  <li>如果有同名的属性或方法，组件本身的属性或方法会覆盖 behavior 中的属性或方法，如果引用了多个 behavior ，在定义段中靠后 behavior 中的属性或方法会覆盖靠前的属性或方法；</li>
  <li>如果有同名的数据字段，如果数据是对象类型，会进行对象合并，如果是非对象类型则会进行相互覆盖；</li>
  <li>生命周期函数不会相互覆盖，而是在对应触发时机被逐个调用。如果同一个 behavior 被一个组件多次引用，它定义的生命周期函数只会被执行一次。</li>
</ul>

<h4 id="组件间关系">组件间关系</h4>
<p>两个自定义组件间的嵌套关系（parent父 / child 子/ ancestor祖先 / descendant子孙），通过<code class="language-plaintext highlighter-rouge">relations</code> 定义段来相互间的通信（必须在两个组件定义中都加入relations定义，否则不会生效）。</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- page.wxml --&gt;</span>
<span class="nt">&lt;custom-ul&gt;</span>
  <span class="nt">&lt;custom-li&gt;</span> item 1 <span class="nt">&lt;/custom-li&gt;</span>
  <span class="nt">&lt;custom-li&gt;</span> item 2 <span class="nt">&lt;/custom-li&gt;</span>
<span class="nt">&lt;/custom-ul&gt;</span>

<span class="c">&lt;!-- component.wxml --&gt;</span>
<span class="nt">&lt;view</span> <span class="na">class=</span><span class="s">'wapper'</span><span class="nt">&gt;</span>
  <span class="nt">&lt;text&gt;</span>custom-ul<span class="nt">&lt;/text&gt;</span>
  <span class="nt">&lt;slot&gt;&lt;/slot&gt;</span>
<span class="nt">&lt;/view&gt;</span>


<span class="c">&lt;!-- children-component.wxml --&gt;</span>
<span class="nt">&lt;view&gt;</span>
  <span class="nt">&lt;text&gt;</span>li-item<span class="nt">&lt;/text&gt;</span>
  <span class="nt">&lt;slot&gt;&lt;/slot&gt;</span>
<span class="nt">&lt;/view&gt;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
//page.json
{
  "usingComponents": {
    "custom-ul": "../component/component",
    "custom-li": "../component/children-component"
  }
}

//component.json
{
  "component": true
}

//children-component.json
{
  "component": true
}
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//component.js</span>
<span class="nx">Component</span><span class="p">({</span>
  <span class="na">relations</span><span class="p">:{</span>
    <span class="dl">'</span><span class="s1">children-component</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>  <span class="c1">//子组件相对路径</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">child</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 关联的目标节点应为子节点</span>
      <span class="na">linked</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 每次有custom-li被插入时执行，target是该节点实例对象，触发在该节点attached生命周期之后</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">--linked--</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">target</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="na">linkChanged</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 每次有custom-li被移动后执行，target是该节点实例对象，触发在该节点moved生命周期之后</span>
      <span class="p">},</span>
      <span class="na">unlinked</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 每次有custom-li被移除时执行，target是该节点实例对象，触发在该节点detached生命周期之后</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">_getAllLi</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 使用getRelationNodes可以获得nodes数组，包含所有已关联的custom-li，且是有序的</span>
      <span class="kd">var</span> <span class="nx">nodes</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getRelationNodes</span><span class="p">(</span><span class="dl">'</span><span class="s1">children-component</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">--getAllLi--</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nodes</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">ready</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_getAllLi</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">})</span>


<span class="c1">//children-component.js</span>
<span class="nx">Component</span><span class="p">({</span>
  <span class="na">data</span><span class="p">:{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">relations</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">'</span><span class="s1">component</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>  <span class="c1">//父组件相对路径</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">parent</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 关联的目标节点应为父节点</span>
      <span class="na">linked</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 每次被插入到custom-ul时执行，target是custom-ul节点实例对象，触发在attached生命周期之后</span>
      <span class="p">},</span>
      <span class="na">linkChanged</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 每次被移动后执行，target是custom-ul节点实例对象，触发在moved生命周期之后</span>
      <span class="p">},</span>
      <span class="na">unlinked</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 每次被移除时执行，target是custom-ul节点实例对象，触发在detached生命周期之后</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>

</code></pre></div></div>

<p>页面显示和控制台打印入下：
<img src="http://upload-images.jianshu.io/upload_images/10171700-073108d440557834.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="页面显示" />
<img src="http://upload-images.jianshu.io/upload_images/10171700-15d83b3f5c70fe1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="console" /></p>

<h4 id="官网api">官网API</h4>
<p><img src="http://upload-images.jianshu.io/upload_images/10171700-43306233c6966add.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="说了这么多，官网基本都有" /></p>

<p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/custom-component/">微信小程序-自定义组件</a></p>

:ET